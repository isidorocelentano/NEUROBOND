import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './components/ui/card';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { ArrowRight, Send, User, MessageCircle, Target, CheckCircle, Star, Mic, Globe, UserCircle, Home, ArrowLeft } from 'lucide-react';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

// Enhanced SpeechInput Component with improved UI and internationalization
const SpeechInput = ({ value, onChange, placeholder, className, onKeyPress, t, currentAppLanguage }) => {
  const [isListening, setIsListening] = useState(false);
  const [currentSpeechLanguage, setCurrentSpeechLanguage] = useState(currentAppLanguage === 'en' ? 'en-US' : 'de-DE');
  const [showLanguageMenu, setShowLanguageMenu] = useState(false);
  const [speechSupported, setSpeechSupported] = useState(true);
  const [error, setError] = useState('');
  const recognitionRef = useRef(null);

  // Simplified speech languages based on app language
  const speechLanguageOptions = {
    'de-DE': { name: t('languageGerman'), flag: 'üá©üá™' },
    'de-CH': { name: t('languageSwissGerman'), flag: 'üá®üá≠' }, 
    'en-US': { name: t('languageEnglish'), flag: 'üá∫üá∏' },
    'en-GB': { name: 'English (UK)', flag: 'üá¨üáß' }
  };

  // Auto-adjust speech language when app language changes
  useEffect(() => {
    if (currentAppLanguage === 'en' && currentSpeechLanguage.startsWith('de')) {
      setCurrentSpeechLanguage('en-US');
    } else if (currentAppLanguage === 'de' && currentSpeechLanguage.startsWith('en')) {
      setCurrentSpeechLanguage('de-DE');
    }
  }, [currentAppLanguage]);

  useEffect(() => {
    // Check for Speech Recognition support
    if (typeof window !== 'undefined') {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      
      if (SpeechRecognition) {
        try {
          recognitionRef.current = new SpeechRecognition();
          recognitionRef.current.continuous = false;
          recognitionRef.current.interimResults = false;
          recognitionRef.current.lang = currentSpeechLanguage;

          recognitionRef.current.onstart = () => {
            console.log('Speech recognition started');
            setError('');
          };

          recognitionRef.current.onresult = (event) => {
            console.log('Speech recognition result:', event.results);
            const transcript = event.results[0][0].transcript;
            const currentValue = value || '';
            const newValue = currentValue + (currentValue ? ' ' : '') + transcript;
            onChange({ target: { value: newValue } });
            setIsListening(false);
            setError('');
          };

          recognitionRef.current.onend = () => {
            console.log('Speech recognition ended');
            setIsListening(false);
          };

          recognitionRef.current.onerror = (event) => {
            console.error('Speech recognition error:', event);
            setIsListening(false);
            
            switch (event.error) {
              case 'not-allowed':
                setError(t('microphonePermission'));
                break;
              case 'no-speech':
                setError(t('noSpeechDetected'));
                break;
              case 'audio-capture':
                setError(t('noMicrophone'));
                break;
              case 'network':
                setError(t('networkError'));
                break;
              default:
                setError(`${t('error')}: ${event.error}`);
            }
          };

          setSpeechSupported(true);
        } catch (err) {
          console.error('Error initializing speech recognition:', err);
          setSpeechSupported(false);
          setError('Spracherkennung nicht verf√ºgbar');
        }
      } else {
        console.warn('Speech Recognition not supported');
        setSpeechSupported(false);
        setError('Spracherkennung wird von diesem Browser nicht unterst√ºtzt');
      }
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.abort();
      }
    };
  }, [currentLanguage]);

  const requestMicrophonePermission = async () => {
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log('Microphone permission granted');
      return true;
    } catch (err) {
      console.error('Microphone permission denied:', err);
      setError('Mikrofon-Berechtigung erforderlich. Bitte erlauben Sie den Zugriff.');
      return false;
    }
  };

  const startListening = async () => {
    if (!speechSupported) {
      setError('Spracherkennung nicht verf√ºgbar');
      return;
    }

    if (!recognitionRef.current || isListening) return;

    // Request microphone permission first
    const hasPermission = await requestMicrophonePermission();
    if (!hasPermission) return;

    try {
      setIsListening(true);
      setError('');
      recognitionRef.current.lang = currentSpeechLanguage;
      recognitionRef.current.start();
      console.log('Starting speech recognition with language:', currentLanguage);
    } catch (err) {
      console.error('Error starting speech recognition:', err);
      setIsListening(false);
      setError('Fehler beim Starten der Spracherkennung');
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
      console.log('Stopping speech recognition');
    }
  };

  return (
    <div className="relative">
      {/* Main Input Container */}
      <div className="relative bg-gray-700 border border-gray-600 rounded-lg overflow-hidden focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-transparent">
        <Input
          value={value}
          onChange={onChange}
          placeholder={placeholder}
          className={`${className} pr-24 bg-transparent border-0 focus:ring-0 text-white placeholder-gray-400`}
          onKeyPress={onKeyPress}
        />
        
        {/* Enhanced Control Panel */}
        <div className="absolute right-0 top-0 bottom-0 flex items-center bg-gray-800/50 border-l border-gray-600">
          
          {/* Language Selector */}
          <div className="relative">
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setShowLanguageMenu(!showLanguageMenu)}
              className="h-10 px-3 text-gray-300 hover:text-white hover:bg-gray-600 border-r border-gray-600 rounded-none"
              title={`${t('language')}: ${speechLanguageOptions[currentSpeechLanguage]?.name}`}
            >
              <Globe className="w-4 h-4 mr-1" />
              <span className="text-xs font-medium">
                {speechLanguageOptions[currentSpeechLanguage]?.flag}
              </span>
            </Button>
            
            {/* Improved Language Dropdown */}
            {showLanguageMenu && (
              <div className="absolute right-0 top-full mt-1 bg-gray-800 border border-gray-600 rounded-lg shadow-xl z-50 min-w-40 overflow-hidden">
                <div className="px-3 py-2 bg-gray-700 border-b border-gray-600">
                  <p className="text-xs font-medium text-gray-300">{t('speechLanguage') || 'Sprache ausw√§hlen'}</p>
                </div>
                {Object.entries(speechLanguageOptions).map(([langCode, langData]) => (
                  <button
                    key={langCode}
                    type="button"
                    onClick={() => {
                      setCurrentSpeechLanguage(langCode);
                      setShowLanguageMenu(false);
                      setError(''); // Clear error when language changes
                    }}
                    className={`w-full flex items-center px-3 py-2 text-sm hover:bg-gray-700 transition-colors ${
                      currentSpeechLanguage === langCode ? 'bg-blue-600 text-white' : 'text-gray-200'
                    }`}
                  >
                    <span className="mr-2 text-base">{langData.flag}</span>
                    <span className="font-medium">{langData.name}</span>
                    {currentSpeechLanguage === langCode && (
                      <CheckCircle className="w-4 h-4 ml-auto text-white" />
                    )}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Microphone Button */}
          <Button
            type="button"
            variant="ghost"
            size="sm"
            onClick={isListening ? stopListening : startListening}
            disabled={!speechSupported}
            className={`h-10 px-3 rounded-none transition-all ${
              isListening 
                ? 'text-red-400 hover:text-red-300 bg-red-900/20 animate-pulse' 
                : 'text-gray-300 hover:text-white hover:bg-gray-600'
            } ${!speechSupported ? 'opacity-50 cursor-not-allowed' : ''}`}
            title={isListening ? t('stopRecording') || 'Aufnahme stoppen' : t('startSpeechInput') || 'Spracheingabe starten'}
          >
            <Mic className={`w-4 h-4 ${isListening ? 'animate-pulse' : ''}`} />
            {isListening && (
              <div className="ml-1">
                <div className="flex space-x-1">
                  <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce" style={{animationDelay: '0ms'}}></div>
                  <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce" style={{animationDelay: '150ms'}}></div>
                  <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce" style={{animationDelay: '300ms'}}></div>
                </div>
              </div>
            )}
          </Button>
        </div>
      </div>
      
      {/* Status & Error Messages */}
      {error && (
        <div className="mt-2 text-sm text-red-400 bg-red-900/20 border border-red-700/30 rounded-lg px-3 py-2 flex items-center">
          <div className="w-2 h-2 bg-red-400 rounded-full mr-2 flex-shrink-0"></div>
          {error}
        </div>
      )}
      
      {isListening && !error && (
        <div className="mt-2 text-sm text-blue-400 bg-blue-900/20 border border-blue-700/30 rounded-lg px-3 py-2 flex items-center">
          <div className="w-2 h-2 bg-blue-400 rounded-full mr-2 flex-shrink-0 animate-pulse"></div>
          {t('listeningActive') || 'Zuh√∂ren aktiv... Sprechen Sie jetzt'}
        </div>
      )}
    </div>
  );
};

const TrainingScenario = ({ scenarioId, userId, userName, partnerName, onComplete, onBack, t, currentLanguage }) => {
  const [sessionData, setSessionData] = useState(null);
  const [partnerMessage, setPartnerMessage] = useState('');
  const [userResponse, setUserResponse] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [currentPhase, setCurrentPhase] = useState('question'); // question, feedback, completed
  const [evaluation, setEvaluation] = useState(null);
  const [notification, setNotification] = useState({ show: false, message: '', type: 'info' });
  
  // Speech recognition now handled by SpeechInput component
  
  // Load avatars from localStorage
  const [userAvatar, setUserAvatar] = useState(localStorage.getItem('user_avatar'));
  const [partnerAvatar, setPartnerAvatar] = useState(localStorage.getItem('partner_avatar'));

  // Language options now handled by SpeechInput component

  // Proper notification function
  const showNotification = (message, type = 'info') => {
    setNotification({ show: true, message, type });
    setTimeout(() => {
      setNotification({ show: false, message: '', type: 'info' });
    }, 4000);
  };

  useEffect(() => {
    startScenario();
  }, []);

  // Speech recognition functionality now handled by SpeechInput component

  // Get detailed scenario context based on scenario ID
  const getDetailedScenarioContext = (scenarioId) => {
    const scenarios = {
      // Stufe 1: Grundlagen der Empathie
      1: `Es ist Sonntagabend, und Sie beide sitzen gem√ºtlich auf der Couch. Eigentlich war es ein sch√∂ner Tag - Sie haben zusammen gefr√ºhst√ºckt, waren spazieren und haben einen Film geschaut. Doch pl√∂tzlich merken Sie, dass ${partnerName} immer stiller wird. Die Stirn ist leicht gerunzelt, der Blick wird nachdenklich. Sie sp√ºren, wie sich die Stimmung ver√§ndert. ${partnerName} scheint mit etwas zu ringen, was schon l√§nger besch√§ftigt. Die Arbeitsbelastung war in letzter Zeit sehr hoch, und Sie haben bemerkt, wie ersch√∂pft ${partnerName} in den letzten Wochen nach Hause kam. Jetzt, in diesem ruhigen Moment, sucht ${partnerName} das Gespr√§ch mit Ihnen...`,
      
      2: `Sie kommen nach einem anstrengenden Tag nach Hause und freuen sich auf einen entspannten Abend mit ${partnerName}. Doch kaum haben Sie die T√ºr aufgeschlossen, sp√ºren Sie sofort: Etwas ist anders. ${partnerName} sitzt am K√ºchentisch, umgeben von Papieren und dem Laptop. Die Schultern sind angespannt, die Bewegungen fahrig. Sie kennen diesen Blick - eine Mischung aus Frustration, Entt√§uschung und tiefer Verletzung. Offensichtlich ist heute bei der Arbeit etwas vorgefallen. Ein wichtiges Projekt, an dem ${partnerName} wochenlang gearbeitet hat, scheint nicht wie erhofft gelaufen zu sein. Sie sehen die Tr√§nen, die ${partnerName} zur√ºckzuhalten versucht...`,
      
      3: `Es ist Samstag fr√ºh am Morgen. Eigentlich wollten Sie beide heute gemeinsam Zeit verbringen - vielleicht einen Ausflug machen oder einfach zusammen relaxen. Doch ${partnerName} wirkt unruhig und abwesend. Beim Fr√ºhst√ºck starrt ${partnerName} immer wieder auf das Handy, tippt Nachrichten und scheint v√∂llig in Gedanken versunken. Sie merken, dass etwas ${partnerName} innerlich sehr besch√§ftigt. Die Freundin Sarah hat gestern angerufen und von Problemen in ihrer Ehe erz√§hlt. Das hat bei ${partnerName} offensichtlich etwas ausgel√∂st - √Ñngste und Zweifel √ºber Ihre eigene Beziehung. Die Unsicherheit nagt an ${partnerName}, und diese Gedanken lassen sich einfach nicht abstellen...`,
      
      4: `Sie beide haben eigentlich einen wundersch√∂nen Abend geplant. Reservierung im Lieblingsrestaurant, schicke Kleidung, Zeit nur f√ºr Sie beide. Doch schon auf dem Weg dorthin bemerken Sie, dass ${partnerName} angespannt wirkt. Im Restaurant dann die Katastrophe: Der Service ist schlecht, das Essen kommt viel zu sp√§t und ist auch noch kalt. Was als romantischer Abend gedacht war, wird zur Entt√§uschung. Doch das eigentliche Problem liegt tiefer. ${partnerName} hatte sich so sehr auf diesen Abend gefreut, hatte gehofft, dass nach den stressigen Wochen endlich wieder Normalit√§t und N√§he in Ihre Beziehung kommt. Jetzt f√ºhlt sich ${partnerName}, als w√ºrde selbst das nicht klappen...`,
      
      5: `Heute war ein Tag wie viele andere - oder sollte es zumindest sein. Doch w√§hrend Sie im B√ºro waren, hat ${partnerName} zu Hause einen Anruf von der eigenen Mutter bekommen. Ein Gespr√§ch, das alte Wunden aufgerissen hat. Famili√§re Konflikte, die ${partnerName} schon seit Jahren besch√§ftigen, sind wieder hochgekocht. Vorw√ºrfe, Schuldzuweisungen, das Gef√ºhl, nie genug zu sein. Als Sie nach Hause kommen, finden Sie ${partnerName} v√∂llig aufgel√∂st vor. Die Augen sind rot geweint, die H√§nde zittern noch leicht. ${partnerName} f√ºhlt sich emotional v√∂llig ersch√∂pft und wei√ü nicht, wie mit diesen alten, schmerzhaften Gef√ºhlen umgegangen werden soll...`,

      // Stufe 2: Konfliktl√∂sung  
      6: `Sie beide sitzen am Esstisch und planen eigentlich Ihren gemeinsamen Urlaub. Die Brosch√ºren sind ausgebreitet, das Laptop ge√∂ffnet. Doch was als freudige Vorfreude beginnen sollte, wird schnell zur Diskussion. ${partnerName} m√∂chte unbedingt in die Berge, Wandern, Ruhe und Natur. Sie hingegen tr√§umen von Sonne, Strand und dem Meer. Mit jedem Argument wird die Stimmung angespannter. ${partnerName}s Stimme wird lauter, die Gesichtsz√ºge h√§rter. "Du verstehst einfach nicht, was ich brauche!", platzt es aus ${partnerName} heraus. Die Entt√§uschung dar√ºber, dass Sie beide so unterschiedliche Vorstellungen haben, wiegt schwer. ${partnerName} f√ºhlt sich nicht geh√∂rt und unverstanden...`,
      
      7: `Gestern Abend hatten Sie beide einen Streit √ºber die Haushaltsaufteilung. Heute Morgen herrscht eisiges Schweigen beim Fr√ºhst√ºck. ${partnerName} vermeidet Blickkontakt, die Bewegungen sind steif und kontrolliert. Sie sp√ºren die K√§lte zwischen Ihnen. Als ${partnerName} schlie√ülich zur Arbeit aufbricht, f√§llt leise aber bestimmt: "Wir m√ºssen reden." Der ganze Tag √ºber kreisen Ihre Gedanken. Am Abend sitzen Sie sich gegen√ºber. ${partnerName} hat sich offensichtlich Gedanken gemacht, wirkt aber verletzt und aufgebracht. "Ich f√ºhle mich, als w√ºrde ich alles alleine machen. Deine Kritik von gestern hat mich richtig getroffen...", beginnt ${partnerName} mit zittriger Stimme...`,
      
      8: `Es ist ein normaler Dienstagabend. Sie beide sind m√ºde von der Arbeit, eigentlich wollten Sie nur entspannen. Doch dann klingelt das Telefon - ${partnerName}s Schwester ruft an und bittet um Hilfe beim Umzug am Wochenende. ${partnerName} sagt spontan zu, ohne Sie zu fragen. Als das Gespr√§ch beendet ist, merken Sie Ihre Ver√§rgerung. Sie hatten andere Pl√§ne f√ºr das Wochenende, wollten endlich mal Zeit f√ºr sich beide. ${partnerName} bemerkt Ihre Reaktion und wird sofort defensiv: "Das ist meine Familie! Ich kann doch nicht nein sagen!" Die Situation eskaliert schnell. ${partnerName} f√ºhlt sich zwischen Familie und Partnerschaft zerrissen und versteht nicht, warum Sie nicht automatisch mithelfen wollen...`,

      // Stufe 3: Emotionale Intelligenz
      9: `Sie sind gerade dabei, den Abend zu planen, als ${partnerName} vom Bad her√ºberruft. Die Stimme klingt anders - angespannt, fast panisch. Als Sie nachschauen, steht ${partnerName} vor dem Spiegel, die H√§nde leicht zitternd. "Ich kann das einfach nicht mehr", fl√ºstert ${partnerName} und deutet auf ihr Spiegelbild. Die letzten Monate waren stressig, die Arbeitsbelastung hoch, und Sie beide hatten kaum Zeit f√ºreinander. ${partnerName} hat zugenommen, f√ºhlt sich unwohl im eigenen K√∂rper. Die Selbstzweifel, die schon lange brodeln, brechen jetzt aus ${partnerName} hervor. "Du findest mich bestimmt nicht mehr attraktiv... ich erkenne mich selbst nicht mehr...", die Tr√§nen flie√üen frei...`,
      
      10: `Nach einem Familienessen bei ${partnerName}s Eltern fahren Sie beide schweigend nach Hause. Die Stimmung im Auto ist gedr√ºckt. ${partnerName} starrt aus dem Fenster, die Kiefer angespannt. Der Abend war schwierig - wie so oft, wenn die Familie zusammenkommt. Kritische Bemerkungen der Mutter, abf√§llige Kommentare √ºber ${partnerName}s Berufswahl, unterschwellige Vorw√ºrfe. Sie haben gesehen, wie ${partnerName} immer kleiner wurde, wie die selbstbewusste Person neben Ihnen zu dem verunsicherten Kind von fr√ºher schrumpfte. Zu Hause angekommen bricht es aus ${partnerName} heraus: "Ich werde niemals gut genug f√ºr sie sein... egal was ich mache, es ist immer falsch...", die Stimme bricht vor Schmerz und jahrelanger Entt√§uschung...`,
      
      11: `Es ist Freitagabend und Sie beide sitzen zusammen auf der Terrasse. Ein sch√∂ner, warmer Sommerabend. ${partnerName} hat eine Gehaltserh√∂hung bekommen - eigentlich ein Grund zu feiern. Doch statt Freude sehen Sie Zweifel in ${partnerName}s Gesicht. "Ich verdiene das gar nicht", murmelt ${partnerName} und spielt nerv√∂s mit dem Weinglas. "Die anderen in der Abteilung arbeiten auch hart. Warum ausgerechnet ich?" Das Impostor-Syndrom, das ${partnerName} schon lange begleitet, meldet sich wieder. Die Angst, ein Betr√ºger zu sein, nicht wirklich qualifiziert f√ºr den Erfolg. ${partnerName} kann den Moment nicht genie√üen, ist gefangen in Selbstzweifeln und der Angst, enttarnt zu werden...`,

      // Stufe 4: Beziehungsdynamiken
      12: `Sie beide sitzen am Sonntagmorgen beim Fr√ºhst√ºck. Eigentlich sollte es ein entspannter Start in den Tag werden, doch ${partnerName} wirkt nachdenklich und angespannt. Pl√∂tzlich durchbricht ${partnerName} die Stille: "Merkst du auch, dass wir immer die gleichen Diskussionen haben?" Die Erkenntnis liegt schwer im Raum. Egal ob es um Hausarbeit, Geld oder Zukunftspl√§ne geht - Sie beide scheinen immer wieder in dieselben Muster zu fallen. ${partnerName} spricht aus, was Sie beide schon l√§ngst sp√ºren: dass sich Ihre Gespr√§che im Kreis drehen, dass dieselben Ausl√∂ser zu denselben Reaktionen f√ºhren. "Ich f√ºhle mich, als w√§ren wir in einer Schleife gefangen", sagt ${partnerName} mit Tr√§nen in den Augen, "und ich wei√ü nicht, wie wir da rauskommen sollen..."`,
      
      13: `Es ist ein ganz normaler Mittwochabend. Sie beide schauen zusammen einen Film, als ${partnerName} pl√∂tzlich das Bild pausiert. "Wir m√ºssen √ºber etwas reden", sagt ${partnerName} mit ernster Miene. Die letzten Wochen haben sich angef√ºhlt, als w√ºrden Sie beide aneinander vorbeileben. ${partnerName} hat das Gef√ºhl, st√§ndig zur√ºckzustecken, eigene Bed√ºrfnisse zu ignorieren, um Konflikte zu vermeiden. "Ich sage nie nein zu dir", beginnt ${partnerName} z√∂gerlich, "aber dabei verliere ich mich selbst. Ich wei√ü gar nicht mehr, was ich wirklich will." Die Erkenntnis schmerzt - aus lauter Liebe und dem Wunsch nach Harmonie hat ${partnerName} die eigenen Grenzen verwischt und f√ºhlt sich jetzt orientierungslos und ungl√ºcklich...`,
      
      14: `Nach einem sch√∂nen gemeinsamen Tag im Park kommen Sie beide nach Hause. Es war ein perfekter Tag - Sonnenschein, Lachen, tiefe Gespr√§che. Doch als Sie die Wohnung betreten, ver√§ndert sich ${partnerName}s Stimmung merklich. Die Schultern sinken herab, der Blick wird schwerm√ºtig. "Kann ich dir vertrauen?", fragt ${partnerName} pl√∂tzlich und √ºberrascht Sie mit der Direktheit. Die Frage kommt aus dem Nichts, doch ${partnerName} erkl√§rt: "Ich habe solche Angst, dass du mich irgendwann verl√§sst. Dass du merkst, dass ich nicht gut genug bin." Fr√ºhere Beziehungen haben Narben hinterlassen, Vertrauensbr√ºche, die ${partnerName} bis heute verfolgen. Die Angst vor Verlust und Verletzung √ºberschattet selbst die sch√∂nsten Momente...`,

      // Stufe 5: Meisterschaft
      15: `Es ist 3 Uhr nachts, als Sie von einem Anruf geweckt werden. ${partnerName}s beste Freundin ist am Telefon, v√∂llig aufgel√∂st. Ihr Partner hat sie verlassen, sie wei√ü nicht wohin. ${partnerName} ist sofort hellwach und springt aus dem Bett. "Ich muss zu ihr", sagt ${partnerName} mit fester Stimme. Sie sehen die Entschlossenheit, aber auch die tiefe Sorge um die Freundin. Als ${partnerName} zur√ºckkommt, ist es bereits Morgen. Ersch√∂pft und emotional mitgenommen l√§sst ${partnerName} sich auf die Couch fallen. "Sie ist v√∂llig am Boden zerst√∂rt. Ich f√ºhle mich so hilflos - wie kann ich ihr helfen, wenn ihre Welt gerade zusammenbricht?" ${partnerName} tr√§gt die Schmerzen anderer mit und wei√ü nicht, wie mit dieser emotionalen Last umgegangen werden soll...`,
      
      16: `Sie beide sitzen auf der Bank im Park, wo Sie sich vor 5 Jahren zum ersten Mal begegnet sind. ${partnerName} hat vorgeschlagen, hierher zu kommen, um √ºber die Zukunft zu sprechen. Die letzten Monate waren turbulent - berufliche Ver√§nderungen, famili√§re Herausforderungen, Entscheidungen √ºber Wohnort und Lebensstil. ${partnerName} schaut nachdenklich in die Ferne: "Manchmal frage ich mich, ob wir in dieselbe Richtung gehen." Die Unsicherheit √ºber die gemeinsame Zukunft nagt an ${partnerName}. "Ich liebe dich so sehr, aber ich habe Angst, dass wir verschiedene Tr√§ume haben. Was, wenn wir uns auseinanderentwickeln?" Die Tiefe der Gef√ºhle steht der Angst vor Ungewissheit gegen√ºber...`,
      
      17: `Sie beide haben gerade ein intensives Gespr√§ch mit einem befreundeten Paar gef√ºhrt, das vor der Scheidung steht. Auf dem Heimweg ist ${partnerName} ungew√∂hnlich still. Zu Hause angekommen setzt ${partnerName} sich zu Ihnen und nimmt Ihre Hand. "Heute ist mir klar geworden, wie zerbrechlich Beziehungen sind", beginnt ${partnerName} leise. "Ich sehe so viele Paare um uns herum, die sich verlieren, die aufgeben. Und ich denke daran, was wir anderen Paaren raten k√∂nnten." ${partnerName} zeigt eine neue Reife, eine Weisheit aus den eigenen Erfahrungen. "Vielleicht k√∂nnten wir anderen helfen, das zu bewahren, was wir fast verloren h√§tten. Aber daf√ºr m√ºssten wir erst selbst sicher sein, dass wir es geschafft haben..."`,
    };
    
    return scenarios[scenarioId] || `Sie und ${partnerName} befinden sich in einer emotionalen Situation, die Ihre empathischen F√§higkeiten herausfordert...`;
  };

  // Get emotional indicators for the scenario
  const getEmotionalIndicators = (scenarioId) => {
    const indicators = {
      // Stufe 1: Grundlagen der Empathie
      1: `die Anspannung in ${partnerName}s Gesicht, die m√ºden Augen und die leicht gesunkenen Schultern`,
      2: `die Tr√§nen in ${partnerName}s Augen, die verkrampften H√§nde und die entt√§uschte K√∂rperhaltung`,  
      3: `die Unruhe und Nervosit√§t von ${partnerName}, das st√§ndige Gr√ºbeln und die angespannte Mimik`,
      4: `die Frustration und Entt√§uschung von ${partnerName}, die sich in der ganzen K√∂rperhaltung widerspiegelt`,
      5: `die emotionale Ersch√∂pfung von ${partnerName}, die verweinten Augen und das leichte Zittern`,
      
      // Stufe 2: Konfliktl√∂sung
      6: `die steigende Lautst√§rke in ${partnerName}s Stimme, die verkrampften Kiefer und die abwehrende Gestik`,
      7: `die Verletzung in ${partnerName}s Blick, die kontrollierte aber zittrige Stimme und die aufrechte, defensive Haltung`,
      8: `die Zerrissenheit in ${partnerName}s Gesichtsz√ºgen, das nerv√∂se Gestikulieren und die flehende Tonlage`,
      
      // Stufe 3: Emotionale Intelligenz
      9: `die Panik in ${partnerName}s Augen, die zittrigen H√§nde und die zusammengesunkene K√∂rperhaltung`,
      10: `die tiefen Furchen der Entt√§uschung in ${partnerName}s Gesicht, die angespannte Kiefermuskulatur und die nach innen gekehrte Haltung`,
      11: `die Selbstzweifel in ${partnerName}s unsicheren Blick, das nerv√∂se Spielen mit den H√§nden und die kleinlaute Stimme`,
      
      // Stufe 4: Beziehungsdynamiken  
      12: `die Resignation in ${partnerName}s Augen, die schweren Seufzer und die hilflose Gestik`,
      13: `die innere Zerrissenheit in ${partnerName}s z√∂gerlicher Sprache, die unsichere K√∂rperhaltung und den suchenden Blick`,
      14: `die Angst vor Verlust in ${partnerName}s Stimme, die schutzsuchende K√∂rperhaltung und die vulnerable Offenheit`,
      
      // Stufe 5: Meisterschaft
      15: `die emotionale Ersch√∂pfung vom Tragen fremder Lasten, die schweren Augenlider und die belastete Ausstrahlung`,
      16: `die nachdenkliche Melancholie in ${partnerName}s Blick in die Ferne, die nachdenklichen Pausen und die sehns√ºchtige K√∂rpersprache`,
      17: `die neue Reife und Weisheit in ${partnerName}s Worten, die ruhige aber bestimmte Ausstrahlung und die verantwortungsvolle Haltung`
    };
    
    return indicators[scenarioId] || `dass ${partnerName} emotional belastet ist`;
  };

  const startScenario = async () => {
    try {
      console.log('üöÄ Starting training scenario:', { scenarioId, userId, userName, partnerName });
      console.log('üåê Backend URL:', BACKEND_URL);
      
      const response = await fetch(`${BACKEND_URL}/api/training/start-scenario`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          scenario_id: scenarioId,
          user_id: userId,
          user_name: userName,
          partner_name: partnerName
        })
      });

      console.log('üì° API Response status:', response.status);
      console.log('üì° API Response ok:', response.ok);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Training scenario data received:', data);
        console.log('üí¨ Partner message received:', data.partner_message);
        console.log('üìù Data keys:', Object.keys(data));
        
        // Validate partner_message exists and is not empty
        const partnerMessageContent = data.partner_message || data.partnerMessage || '';
        console.log('üéØ Final partner message content:', partnerMessageContent);
        
        if (!partnerMessageContent || partnerMessageContent.trim() === '') {
          console.warn('‚ö†Ô∏è Partner message is empty, using fallback');
          const fallbackMessage = `Liebe/r ${userName}, ich brauche deine Unterst√ºtzung. Heute war ein schwieriger Tag und ich f√ºhle mich wirklich √ºberfordert.`;
          setPartnerMessage(fallbackMessage);
        } else {
          setPartnerMessage(partnerMessageContent);
        }
        
        // Set sessionData with the response
        setSessionData(data);
        setCurrentPhase('question');
        console.log('‚úÖ Scenario started successfully');
      } else {
        console.error('‚ùå Response not ok:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('‚ùå Error response body:', errorText);
        throw new Error(`Failed to start scenario: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('üí• Error starting scenario:', error);
      console.error('üí• Error details:', error.message);
      
      // Set fallback message on error
      const fallbackMessage = `Liebe/r ${userName}, ich brauche deine Unterst√ºtzung. Heute war ein schwieriger Tag und ich f√ºhle mich wirklich √ºberfordert.`;
      setPartnerMessage(fallbackMessage);
      setSessionData({
        scenario: {
          title: 'Training Szenario',
          context: 'Empathie-Training',
          learning_goals: ['Aktives Zuh√∂ren', 'Empathie zeigen']
        }
      });
      setCurrentPhase('question');
    } finally {
      setLoading(false);
      console.log('üèÅ StartScenario function completed');
    }
  };

  const submitResponse = async () => {
    if (!userResponse.trim() || submitting) return;

    setSubmitting(true);
    
    try {
      // Get AI evaluation of the user's response
      const evaluationResponse = await fetch(`${BACKEND_URL}/api/training/evaluate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_response: userResponse,
          scenario_id: scenarioId,
          user_id: userId
        })
      });

      if (evaluationResponse.ok) {
        const evaluationData = await evaluationResponse.json();
        setEvaluation(evaluationData);
        setCurrentPhase('feedback');
      } else {
        throw new Error('Failed to get evaluation');
      }
    } catch (error) {
      console.error('Error getting evaluation:', error);
      showNotification('Fehler beim Bewerten der Antwort. Bitte versuchen Sie es erneut.', 'error');
    } finally {
      setSubmitting(false);
    }
  };

  const restartScenario = () => {
    setUserResponse('');
    setEvaluation(null);
    setCurrentPhase('question');
    showNotification('Szenario wurde zur√ºckgesetzt. Versuchen Sie es erneut!', 'info');
  };

  const completeScenario = async () => {
    try {
      await fetch(`${BACKEND_URL}/api/training/end-scenario`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          session_id: sessionData.session_id
        })
      });

      setCurrentPhase('completed');
      setTimeout(() => onComplete && onComplete(), 2000);
    } catch (error) {
      console.error('Error completing scenario:', error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900 text-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-blue-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-300">Training wird geladen...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900 text-white relative overflow-hidden">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-600/30 to-purple-600/30 rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-purple-600/30 to-pink-600/30 rounded-full blur-3xl"></div>
      </div>

      <div className="relative z-10 container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Target className="w-8 h-8 text-blue-400" />
            <h1 className="text-3xl font-bold text-white">{sessionData?.scenario?.title}</h1>
          </div>
          <p className="text-gray-300 mb-6">{sessionData?.scenario?.context}</p>
          
          {/* Training Participants */}
          <div className="flex items-center justify-center gap-8 mb-6">
            {/* User Profile */}
            <div className="flex items-center gap-4 bg-gray-800/60 backdrop-blur-sm rounded-2xl px-6 py-3 border border-gray-700/50">
              <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-600 border-3 border-blue-400">
                {userAvatar ? (
                  <img 
                    src={userAvatar} 
                    alt={userName}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-blue-400 to-purple-400 flex items-center justify-center">
                    <UserCircle className="w-10 h-10 text-white/80" />
                  </div>
                )}
              </div>
              <div className="text-left">
                <div className="text-base font-semibold text-white">{userName}</div>
                <div className="text-sm text-blue-200">Sie</div>
              </div>
            </div>
            
            <div className="text-3xl text-gray-500">‚Üî</div>
            
            {/* Partner Profile */}
            <div className="flex items-center gap-4 bg-gray-800/60 backdrop-blur-sm rounded-2xl px-6 py-3 border border-gray-700/50">
              <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-600 border-3 border-green-400">
                {partnerAvatar ? (
                  <img 
                    src={partnerAvatar}
                    alt={partnerName}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-green-400 to-teal-400 flex items-center justify-center">
                    <UserCircle className="w-10 h-10 text-white/80" />
                  </div>
                )}
              </div>
              <div className="text-left">
                <div className="text-base font-semibold text-white">{partnerName}</div>
                <div className="text-sm text-green-200">KI-Partner</div>
              </div>
            </div>
          </div>
          
          <div className="flex justify-center gap-2">
            {sessionData?.scenario?.learning_goals?.map((goal, index) => (
              <span key={index} className="bg-blue-900/30 text-blue-200 px-3 py-1 rounded-full text-sm">
                {goal}
              </span>
            ))}
          </div>
        </div>

        {/* Navigation Header */}
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center gap-2">
            <Button 
              variant="outline"
              size="sm"
              onClick={() => onBack ? onBack() : (onComplete && onComplete())}
              className="border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Zur√ºck
            </Button>
            
            <Button 
              variant="outline"
              size="sm"
              onClick={() => onHome ? onHome() : (onComplete && onComplete())}
              className="border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white"
            >
              <Home className="w-4 h-4 mr-2" />
              Home
            </Button>
          </div>
          
          <div className="flex items-center gap-2 text-sm text-gray-400">
            <span>Szenario {scenarioId}</span>
            <span>‚Ä¢</span>
            <span>{sessionData?.scenario?.title}</span>
          </div>
          
          <Button 
            variant="outline"
            size="sm"
            onClick={() => {
              if (onNext) {
                onNext();
              } else if (scenarioId < 17) {
                showNotification('N√§chstes Szenario wird geladen...', 'info');
                setTimeout(() => {
                  onComplete && onComplete();
                }, 1500);
              } else {
                showNotification('Das war das letzte Szenario! Herzlichen Gl√ºckwunsch!', 'success');
              }
            }}
            className="border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white"
          >
            Weiter
            <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </div>

        {currentPhase === 'question' && (
          <>
            {/* Scenario Question */}
            <Card className="bg-gray-800/90 backdrop-blur-lg shadow-2xl border border-gray-700/50 rounded-3xl mb-6">
              <CardHeader>
                <CardTitle className="text-white text-center text-2xl">
                  Trainings-Szenario
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                {/* Scenario Context */}
                <div className="mb-6">
                  <h4 className="text-blue-200 font-semibold mb-3 text-lg">üìñ Ausgangssituation</h4>
                  <div className="bg-slate-800/60 p-5 rounded-2xl border border-slate-700/50">
                    <p className="text-gray-200 leading-relaxed text-base">
                      {getDetailedScenarioContext(scenarioId)}
                    </p>
                  </div>
                </div>

                {/* Partner Avatar and Direct Message */}
                <div className="flex items-start gap-6 mb-6">
                  <div className="w-20 h-20 rounded-full overflow-hidden bg-gray-600 border-4 border-green-400 flex-shrink-0">
                    {partnerAvatar ? (
                      <img 
                        src={partnerAvatar}
                        alt={partnerName}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gradient-to-br from-green-400 to-teal-400 flex items-center justify-center">
                        <UserCircle className="w-12 h-12 text-white/80" />
                      </div>
                    )}
                  </div>
                  
                  <div className="flex-1">
                    <div className="text-lg font-semibold text-green-200 mb-3">{partnerName} wendet sich an Sie:</div>
                    <div className="bg-green-900/20 p-5 rounded-2xl border border-green-700/50 relative">
                      <div className="absolute -left-3 top-6 w-0 h-0 border-t-8 border-t-transparent border-b-8 border-b-transparent border-r-8 border-r-green-700/50"></div>
                      <p className="text-green-100 leading-relaxed text-lg font-medium italic">
                        "{partnerMessage || sessionData?.partner_message || sessionData?.partnerMessage || 'Dialog wird geladen...'}"
                      </p>
                    </div>
                    
                    {/* Emotional indicators */}
                    <div className="mt-3 flex items-center gap-2 text-sm">
                      <span className="text-yellow-400">üòü</span>
                      <span className="text-gray-400">Sie bemerken {getEmotionalIndicators(scenarioId)}</span>
                    </div>
                  </div>
                </div>

                {/* Learning Goals */}
                <div className="bg-blue-900/30 rounded-2xl border border-blue-700/50 p-4 mb-6">
                  <h4 className="text-blue-200 font-semibold mb-3">üéØ Lernziele in diesem Szenario:</h4>
                  <div className="flex flex-wrap gap-2">
                    {sessionData?.scenario?.learning_goals?.map((goal, index) => (
                      <span key={index} className="bg-blue-700/30 text-blue-200 px-3 py-1 rounded-full text-sm">
                        {goal}
                      </span>
                    )) || [
                      <span key="default1" className="bg-blue-700/30 text-blue-200 px-3 py-1 rounded-full text-sm">Gef√ºhle erkennen</span>,
                      <span key="default2" className="bg-blue-700/30 text-blue-200 px-3 py-1 rounded-full text-sm">Empathisch spiegeln</span>,
                      <span key="default3" className="bg-blue-700/30 text-blue-200 px-3 py-1 rounded-full text-sm">Beruhigung geben</span>
                    ]}
                  </div>
                </div>

                {/* Instructions */}
                <div className="text-center mb-6">
                  <h3 className="text-xl font-semibold text-white mb-3">
                    Wie antworten Sie als {userName} empathisch?
                  </h3>
                  <p className="text-gray-300">
                    {partnerName} hat Ihnen ein Problem anvertraut. Nehmen Sie sich Zeit und formulieren Sie eine einf√ºhlsame Antwort als {userName}, die {partnerName}s Gef√ºhle ernst nimmt und Unterst√ºtzung bietet.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Response Input Area */}
            <Card className="bg-gray-800/90 backdrop-blur-lg shadow-2xl border border-gray-700/50 rounded-3xl">
              <CardContent className="p-6">
                {/* User Avatar and Input Label */}
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 rounded-full overflow-hidden bg-gray-600 border-3 border-blue-400 flex-shrink-0">
                    {userAvatar ? (
                      <img 
                        src={userAvatar} 
                        alt={userName}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gradient-to-br from-blue-400 to-purple-400 flex items-center justify-center">
                        <UserCircle className="w-8 h-8 text-white/80" />
                      </div>
                    )}
                  </div>
                  <div>
                    <h4 className="text-blue-200 font-semibold">Ihre empathische Antwort an {partnerName}</h4>
                    <p className="text-gray-400 text-sm">Wie antworten Sie als {userName} empathisch auf {partnerName}s Problem?</p>
                  </div>
                </div>

                <div className="mb-4">
                  <textarea
                    value={userResponse}
                    onChange={(e) => setUserResponse(e.target.value)}
                    placeholder={`Wie antworten Sie als ${userName} empathisch auf ${partnerName}? Zum Beispiel: "Liebe/r ${partnerName}, ich sehe dass du..." Denken Sie daran: Gef√ºhle erkennen, validieren, Unterst√ºtzung anbieten.`}
                    className="w-full bg-gray-700/50 border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 p-3 min-h-20 resize-none"
                    rows={3}
                  />
                </div>
                
                <div className="flex justify-between items-center">
                  <p className="text-gray-400 text-sm">
                    üí° Tipp: Nutzen Sie das Mikrofon-Icon f√ºr Spracheingabe in 6 Sprachen
                  </p>
                  <Button
                    onClick={submitResponse}
                    disabled={submitting || !userResponse.trim()}
                    className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-6 py-3 text-lg"
                  >
                    {submitting ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                        Wird bewertet...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="w-5 h-5 mr-2" />
                        Antwort bewerten
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </>
        )}

        {currentPhase === 'feedback' && evaluation && (
          <div className="space-y-6">
            {/* Your Response */}
            <Card className="bg-gray-800/90 backdrop-blur-lg shadow-2xl border border-gray-700/50 rounded-3xl">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-3">
                  <div className="w-8 h-8 rounded-full overflow-hidden bg-gray-600 border-2 border-blue-400">
                    {userAvatar ? (
                      <img 
                        src={userAvatar} 
                        alt={userName}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gradient-to-br from-blue-400 to-purple-400 flex items-center justify-center">
                        <UserCircle className="w-5 h-5 text-white/80" />
                      </div>
                    )}
                  </div>
                  Ihre Antwort, {userName}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <div className="flex items-start gap-4">
                  <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-600 border-4 border-blue-400 flex-shrink-0">
                    {userAvatar ? (
                      <img 
                        src={userAvatar} 
                        alt={userName}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gradient-to-br from-blue-400 to-purple-400 flex items-center justify-center">
                        <UserCircle className="w-10 h-10 text-white/80" />
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <div className="text-sm text-blue-300 mb-2 font-medium">{userName} antwortet {partnerName}:</div>
                    <div className="bg-blue-900/30 p-4 rounded-2xl border border-blue-700/50 relative">
                      <div className="absolute -left-3 top-6 w-0 h-0 border-t-8 border-t-transparent border-b-8 border-b-transparent border-r-8 border-r-blue-700/50"></div>
                      <p className="text-blue-100 leading-relaxed text-lg">
                        "{userResponse}"
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Optimal Response */}
            <Card className="bg-gray-800/90 backdrop-blur-lg shadow-2xl border border-gray-700/50 rounded-3xl">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-3">
                  <Star className="w-6 h-6 text-yellow-400" />
                  Optimale empathische Antwort
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-6">
                {/* Optimal Response */}
                <div>
                  <h4 className="font-semibold text-green-400 mb-3 text-lg flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-gradient-to-br from-green-400 to-emerald-400 flex items-center justify-center">
                      <Star className="w-5 h-5 text-white" />
                    </div>
                    So k√∂nnten Sie noch empathischer antworten:
                  </h4>
                  <div className="flex items-start gap-4">
                    <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-600 border-4 border-green-400 flex-shrink-0">
                      {userAvatar ? (
                        <img 
                          src={userAvatar} 
                          alt={`${userName} (optimiert)`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-green-400 to-emerald-400 flex items-center justify-center">
                          <UserCircle className="w-10 h-10 text-white/80" />
                        </div>
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="text-sm text-green-300 mb-2 font-medium">{userName} antwortet {partnerName} (Empathisch optimiert):</div>
                      <div className="bg-green-900/30 p-5 rounded-2xl border border-green-700/50 relative">
                        <div className="absolute -left-3 top-6 w-0 h-0 border-t-8 border-t-transparent border-b-8 border-b-transparent border-r-8 border-r-green-700/50"></div>
                        <p className="text-green-100 leading-relaxed text-lg font-medium">
                          "{evaluation.alternative_responses && evaluation.alternative_responses[0] 
                            ? evaluation.alternative_responses[0] 
                            : `Liebe/r ${partnerName}, ich verstehe, dass dich das wirklich besch√§ftigt und unsicher macht. Es ist v√∂llig normal, dass man sich Sorgen √ºber die Zukunft macht. Lass uns gemeinsam schauen, wie wir mit dieser Unsicherheit umgehen k√∂nnen. Du bist nicht allein mit diesen Gedanken.`}"
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Explanation */}
                <div>
                  <h4 className="font-semibold text-blue-400 mb-3 text-lg">üß† Warum ist diese Antwort empathisch?</h4>
                  <div className="space-y-3">
                    <div className="bg-gray-700/50 p-4 rounded-xl">
                      <div className="flex items-start gap-3">
                        <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <span className="text-white text-sm font-bold">1</span>
                        </div>
                        <div>
                          <h5 className="font-semibold text-blue-200 mb-1">Gef√ºhle erkennen & validieren</h5>
                          <p className="text-gray-300 text-sm">Die Antwort zeigt, dass Sie die Gef√ºhle Ihres Partners wahrnehmen und ernst nehmen.</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-700/50 p-4 rounded-xl">
                      <div className="flex items-start gap-3">
                        <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <span className="text-white text-sm font-bold">2</span>
                        </div>
                        <div>
                          <h5 className="font-semibold text-green-200 mb-1">Normalisierung</h5>
                          <p className="text-gray-300 text-sm">Sie zeigen auf, dass diese Gef√ºhle v√∂llig normal und verst√§ndlich sind.</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-700/50 p-4 rounded-xl">
                      <div className="flex items-start gap-3">
                        <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <span className="text-white text-sm font-bold">3</span>
                        </div>
                        <div>
                          <h5 className="font-semibold text-purple-200 mb-1">Unterst√ºtzung anbieten</h5>
                          <p className="text-gray-300 text-sm">Sie signalisieren Bereitschaft zur gemeinsamen L√∂sungssuche und Solidarit√§t.</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Score and Feedback */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="bg-yellow-900/30 p-4 rounded-2xl border border-yellow-700/50 text-center">
                    <div className="text-3xl font-bold text-yellow-400 mb-2">
                      {evaluation.empathy_score}/10
                    </div>
                    <p className="text-yellow-200 text-sm">Ihr Empathie-Score</p>
                  </div>
                  
                  <div className="bg-purple-900/30 p-4 rounded-2xl border border-purple-700/50">
                    <h5 className="font-semibold text-purple-200 mb-2">üí° Tipp f√ºr das n√§chste Mal:</h5>
                    <p className="text-purple-100 text-sm">{evaluation.next_level_tip || evaluation.feedback}</p>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 pt-4">
                  <Button
                    onClick={restartScenario}
                    variant="outline"
                    className="border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white flex-1"
                  >
                    <ArrowRight className="w-4 h-4 mr-2 rotate-180" />
                    Nochmal versuchen
                  </Button>
                  
                  <Button
                    onClick={completeScenario}
                    className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white flex-1"
                  >
                    <CheckCircle className="w-5 h-5 mr-2" />
                    Training abschlie√üen
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {currentPhase === 'completed' && (
          <Card className="bg-gray-800/90 backdrop-blur-lg shadow-2xl border border-gray-700/50 rounded-3xl">
            <CardContent className="p-8 text-center">
              <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
              <h3 className="text-2xl font-bold text-white mb-4">Training abgeschlossen!</h3>
              <p className="text-gray-300 mb-6">
                Gro√üartig! Sie haben das Szenario "{sessionData?.scenario?.title}" erfolgreich gemeistert.
              </p>
              <div className="flex gap-4 justify-center">
                <Button
                  onClick={() => onHome ? onHome() : (onComplete && onComplete())}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <Home className="w-4 h-4 mr-2" />
                  Zum Dashboard
                </Button>
                <Button
                  onClick={() => onComplete && onComplete()}
                  className="bg-gray-600 hover:bg-gray-700"
                >
                  <Target className="w-4 h-4 mr-2" />
                  Weitere Trainings
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Notification Display */}
        {notification.show && (
          <div className="fixed top-4 right-4 z-50 max-w-md">
            <div className={`p-4 rounded-lg shadow-lg backdrop-blur-sm ${
              notification.type === 'error' 
                ? 'bg-red-900/80 border border-red-700 text-red-100' 
                : notification.type === 'success'
                ? 'bg-green-900/80 border border-green-700 text-green-100'
                : 'bg-blue-900/80 border border-blue-700 text-blue-100'
            }`}>
              <p className="text-sm">{notification.message}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TrainingScenario;